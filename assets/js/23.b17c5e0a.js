(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{508:function(e,a,t){"use strict";t.r(a);var r=t(4),l=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("Java 8 的集合框架（Java Collection Framework）新增了许多方法，这些方法跟 Lambda 表达式和函数接口有很大关系，熟悉这些方法可以提升我们对集合框架的使用水平，也能加深我们对 Lambda的理解。")]),e._v(" "),t("h2",{attrs:{id:"新增方法概览"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新增方法概览"}},[e._v("#")]),e._v(" 新增方法概览")]),e._v(" "),t("p",[e._v("下面的这个表格中列出了接口和新增加的方法")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("接口名")]),e._v(" "),t("th",[e._v("新方法")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("Collection")]),e._v(" "),t("td",[e._v("forEach()，removeIf()，spliterator()，stream()，parallelStream()")])]),e._v(" "),t("tr",[t("td",[e._v("List")]),e._v(" "),t("td",[e._v("rplaceAll()，sort()")])]),e._v(" "),t("tr",[t("td",[e._v("Map")]),e._v(" "),t("td",[e._v("getOrDefault()，forEach()，replaceAll()，putIfAbsent()，remove()，replace()，computeIfAbsent()，computeIfPresent()，compute()，merge()")])])])]),e._v(" "),t("h2",{attrs:{id:"collection-新增方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#collection-新增方法"}},[e._v("#")]),e._v(" Collection 新增方法")]),e._v(" "),t("h3",{attrs:{id:"foreach"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#foreach"}},[e._v("#")]),e._v(" forEach()")]),e._v(" "),t("ul",[t("li",[e._v("签名：void forEach(Consumer<? super E> action)")]),e._v(" "),t("li",[e._v("作用：遍历集合中的元素并逐一交给 Consumer 处理。")])]),e._v(" "),t("p",[e._v("forEach 方法其实是 java.lang.Iterable 接口中新增的方法，Collection 继承了 Iterater，所以 Collection 以及他的子类中也都有了这个方法。")]),e._v(" "),t("h3",{attrs:{id:"removeif"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#removeif"}},[e._v("#")]),e._v(" removeIf()")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("签名：boolean removeIf(Predicate<? super E> filter)")])]),e._v(" "),t("li",[t("p",[e._v("作用：遍历集合元素并逐一交个 Predicate 处理，如果返回 true 就从集合中删除这个元素。如果遍历结束，有元素被删除就返回 true，没有就返回 false。")])])]),e._v(" "),t("h3",{attrs:{id:"spliterator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spliterator"}},[e._v("#")]),e._v(" spliterator()")]),e._v(" "),t("ul",[t("li",[e._v("签名：Spliterator"),t("E",[e._v(" spliterator()")])],1),e._v(" "),t("li",[e._v("作用：返回一个可拆分迭代器，这种迭代器除了可以像 Iterator 那样迭代外还可以调用自身的 trySplit 方法进行拆分，将一个打的迭代器拆分成两个小的迭代器，便于多线程并发处理，提高效率。")])]),e._v(" "),t("p",[e._v("spliterator 方法也是继承自 java.lang.Iterable 接口。")]),e._v(" "),t("h3",{attrs:{id:"stream"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stream"}},[e._v("#")]),e._v(" stream()")]),e._v(" "),t("ul",[t("li",[e._v("签名：default Stream"),t("E",[e._v(" stream()")])],1),e._v(" "),t("li",[e._v("作用：返回一个流。（关于 Stream，我们后面再详细说）")])]),e._v(" "),t("h3",{attrs:{id:"parallelstream"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parallelstream"}},[e._v("#")]),e._v(" parallelStream()")]),e._v(" "),t("ul",[t("li",[e._v("签名：default Stream"),t("E",[e._v(" parallelStream()")])],1),e._v(" "),t("li",[e._v("作用：返回一个并行流。（关于 Stream，我们后面再详细说）")])]),e._v(" "),t("h2",{attrs:{id:"list-新增方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list-新增方法"}},[e._v("#")]),e._v(" List 新增方法")]),e._v(" "),t("h3",{attrs:{id:"replaceall"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#replaceall"}},[e._v("#")]),e._v(" replaceAll()")]),e._v(" "),t("ul",[t("li",[e._v("签名：default void replaceAll(UnaryOperator"),t("E",[e._v(" operator)")])],1),e._v(" "),t("li",[e._v("作用：遍历集合元素、逐一交个 UnaryOperator 处理，并将返回结果代替该元素。")])]),e._v(" "),t("h3",{attrs:{id:"sort"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sort"}},[e._v("#")]),e._v(" sort()")]),e._v(" "),t("ul",[t("li",[e._v("签名：default void sort(Comparator<? super E> c)")]),e._v(" "),t("li",[e._v("作用：根据比较器对集合元素进行排序。")])]),e._v(" "),t("h2",{attrs:{id:"map-新增方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map-新增方法"}},[e._v("#")]),e._v(" Map 新增方法")]),e._v(" "),t("h3",{attrs:{id:"getordefault"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getordefault"}},[e._v("#")]),e._v(" getOrDefault()")]),e._v(" "),t("ul",[t("li",[e._v("签名：default V getOrDefault(Object key, V defaultValue)")]),e._v(" "),t("li",[e._v("作用：返回 key 对应的元素，如果没有这个 key 就返回默认值 defaultValue。")])]),e._v(" "),t("h3",{attrs:{id:"foreach-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#foreach-2"}},[e._v("#")]),e._v(" forEach()")]),e._v(" "),t("ul",[t("li",[e._v("签名：default void forEach(BiConsumer<? super K, ? super V> action)")]),e._v(" "),t("li",[e._v("作用：遍历 map 中的键值对，并交给 BiConsumer 处理。")])]),e._v(" "),t("h3",{attrs:{id:"replaceall-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#replaceall-2"}},[e._v("#")]),e._v(" replaceAll()")]),e._v(" "),t("ul",[t("li",[e._v("签名：default void replaceAll(BiFunction<? super K, ? super V, ? extends V> function)")]),e._v(" "),t("li",[e._v("作用：遍历 map 中的键值对，并交给 BiFunction 处理，然后用执行结果替换原来的 value。")])]),e._v(" "),t("h3",{attrs:{id:"putifabsent"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#putifabsent"}},[e._v("#")]),e._v(" putIfAbsent()")]),e._v(" "),t("ul",[t("li",[e._v("签名：default V putIfAbsent(K key, V value)")]),e._v(" "),t("li",[e._v("作用：如果原值为 null 就将 value 与 key 映射，否则什么都不做；返回原值。")])]),e._v(" "),t("h3",{attrs:{id:"remove"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#remove"}},[e._v("#")]),e._v(" remove()")]),e._v(" "),t("ul",[t("li",[e._v("签名：default boolean remove(Object key, Object value)")]),e._v(" "),t("li",[e._v("作用：如果原值与 value 不相等，什么都不做，返回 false；如果原值与 value 相等，删除 key 。")])]),e._v(" "),t("h3",{attrs:{id:"replace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#replace"}},[e._v("#")]),e._v(" replace()")]),e._v(" "),t("p",[e._v("replace 方法有两个")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("签名：default V replace(K key, V value)")])]),e._v(" "),t("li",[t("p",[e._v("作用：key 存在，则拿新值替换旧值并返回旧值；key 不存在，则什么都不做，返回 null。")])]),e._v(" "),t("li",[t("p",[e._v("签名：default boolean replace(K key, V oldValue, V newValue)")])]),e._v(" "),t("li",[t("p",[e._v("作用：key 存在并且此时 key 对应的值等于 oldValue，则拿新值替换旧值并返回 true；否则什么都不做，返回 false。")])])]),e._v(" "),t("h3",{attrs:{id:"computeifabsent"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#computeifabsent"}},[e._v("#")]),e._v(" computeIfAbsent()")]),e._v(" "),t("ul",[t("li",[e._v("签名：default V computeIfAbsent(K key, Function<? super K, ? extends V> mappingFunction)")]),e._v(" "),t("li",[e._v("作用：如果 key 对应的 value 不为 null ，就直接返回 value； key 不存在或者 key 对应的 value 为 null 时才执行 Function，并将不为 null 的执行结果与 key 关联。")])]),e._v(" "),t("h3",{attrs:{id:"computeifpresent"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#computeifpresent"}},[e._v("#")]),e._v(" computeIfPresent()")]),e._v(" "),t("ul",[t("li",[e._v("签名：default V computeIfPresent(K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)")]),e._v(" "),t("li",[e._v("作用：如果 key 对应的 value 为 null ，就直接返回 null； key 对应的 value 不为 null 时才执行 Function，并将不为 null 的执行结果与 key 关联，返回执行结果，如果执行结果为 null，删除 key ，返回 null。")])]),e._v(" "),t("h3",{attrs:{id:"compute"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#compute"}},[e._v("#")]),e._v(" compute()")]),e._v(" "),t("ul",[t("li",[e._v("签名：default V compute(K key,  BiFunction<? super K, ? super V, ? extends V> remappingFunction)")]),e._v(" "),t("li",[e._v("作用：将 key 和 key 的原值 交给 BiFunction 处理，如果返回值不为 null 就将返回值与 kye 进行映射；如果返回值为 null 就删除 key。")])]),e._v(" "),t("h3",{attrs:{id:"merge"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#merge"}},[e._v("#")]),e._v(" merge()")]),e._v(" "),t("ul",[t("li",[e._v("签名：default V merge(K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)")]),e._v(" "),t("li",[e._v("作用：如果 key 不存在或者对应的值为 null 就将 value 与 key 进行映射；如果 key 对应的值不为 null，就将原值和 value 交给 BiFunction 处理，处理结果非 null 就将处理结果和 key 映射，否则删除 key。")])]),e._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),t("ol",[t("li",[e._v("JCF 新增的这些方法是 Java 8 新特性函数式编程的一部分，熟练掌握，有助于写出优雅代码。")]),e._v(" "),t("li",[e._v("Lambda 真是太好用了，使用 forEach + Lambda 表达式处理集合元素这么久了，才知道里面传入的是个 Consumer，，，看来好的框架使程序员变蠢这句话是有道理的啊。知其然，知其所以然，以后要多学习框架背后更深层次的知识。")])])])}),[],!1,null,null,null);a.default=l.exports}}]);