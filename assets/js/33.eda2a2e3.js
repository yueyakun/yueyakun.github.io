(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{516:function(e,a,n){"use strict";n.r(a);var r=n(4),t=Object(r.a)({},(function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),n("p",[e._v("Spring Cache 是 Spring 在 3.1 版本引入的基于注解的缓存框架，它本质上不是一个具体的缓存实现方案， 而是一个对缓存使用方式的抽象。它基于 AOP 技术，使用简单的几个注解就可以实现缓存数据的功能。")]),e._v(" "),n("p",[e._v("Spring Cache 的核心接口是 org.springframework.cache.Cache 和 org.springframework.cache.CacheManager。\nCache 是各种缓存框架接入 Spring Cache 的基础。\nCacheManager 是我们管理缓存的一个入口，它里面一般维护着一个数据结构来存放不同的 Cache。")]),e._v(" "),n("p",[e._v("不同的缓存技术有不同的 Cache 和 CacheManager 实现，比如，ConcurrentMapCacheManager、CaffeineCacheManager。\n不同的 CacheManager 一般使用的都是使用 ConcurrentHashMap 数据结构来维护缓存，比如，ConcurrentMapCacheManager 和 CaffeineCacheManager 都是使用 ConcurrentHashMap 存储缓存。")]),e._v(" "),n("h2",{attrs:{id:"不同缓存技术及其对应的-cachemanager"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不同缓存技术及其对应的-cachemanager"}},[e._v("#")]),e._v(" 不同缓存技术及其对应的 CacheManager")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("CacheManager")]),e._v(" "),n("th",[e._v("描述")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("SimpleCacheManager")]),e._v(" "),n("td",[e._v("spring.context 包提供，可以自己指定缓存实现")])]),e._v(" "),n("tr",[n("td",[e._v("ConcurrentMapCacheManager")]),e._v(" "),n("td",[e._v("spring.context 包提供，缓存实现为 ConcurrentHashMap")])]),e._v(" "),n("tr",[n("td",[e._v("NoOpCacheManager")]),e._v(" "),n("td",[e._v("一个空的实现，不会实际存储缓存")])]),e._v(" "),n("tr",[n("td",[e._v("EhCacheCacheManager")]),e._v(" "),n("td",[e._v("以 EhCache 作为缓存技术")])]),e._v(" "),n("tr",[n("td",[e._v("GuavaCacheManager")]),e._v(" "),n("td",[e._v("使用 google guava 作为缓存技术")])]),e._v(" "),n("tr",[n("td",[e._v("CaffeineCacheManager")]),e._v(" "),n("td",[e._v("使用 Caffeine Cache 作为缓存技术，为替代 Guava 而生，详情请看"),n("a",{attrs:{href:"https://blog.fengxiuge.top/2020/2020-10-14-caffeine-cache.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("上一篇博客"),n("OutboundLink")],1)])]),e._v(" "),n("tr",[n("td",[e._v("JCacheCacheManager")]),e._v(" "),n("td",[e._v("使用 JCache 标准的实现作为缓存技术")])]),e._v(" "),n("tr",[n("td",[e._v("RedisCacheManager")]),e._v(" "),n("td",[e._v("使用 Redis 作为缓存技术")])])])]),e._v(" "),n("h2",{attrs:{id:"缓存依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缓存依赖"}},[e._v("#")]),e._v(" 缓存依赖")]),e._v(" "),n("p",[e._v("Spring Boot 默认的 CacheManager 是 ConcurrentMapCacheManager，\nCacheManager 可以配置多个，但是其中一个要用 @Primary 注解指明优先级。\n默认情况下用 ConcurrentMapCache 不需要引入任何其他缓存框架的依赖")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\x3c!--Spring Cache 基础依赖--\x3e\n<dependency>    \n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-cache</artifactId>\n</dependency>\n\n\x3c!--使用 Caffeine Cache--\x3e\n<dependency>\n    <groupId>com.github.ben-manes.caffeine</groupId>\n    <artifactId>caffeine</artifactId>\n<version>2.6.2</version></dependency>\n\n\x3c!--使用 Caffeine Cache--\x3e\n<dependency>\n    <groupId>com.github.ben-manes.caffeine</groupId>\n    <artifactId>caffeine</artifactId>\n<version>2.6.2</version></dependency>\n\n\x3c!--使用 ehcache--\x3e\n<dependency>\n     <groupId>net.sf.ehcache</groupId>\n     <artifactId>ehcache</artifactId>\n<version>2.6.2</version></dependency>\n\n\x3c!--使用 redis--\x3e\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n<version>2.6.2</version></dependency>\n")])])]),n("h2",{attrs:{id:"application-配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#application-配置"}},[e._v("#")]),e._v(" application 配置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("spring.cache.type= ＃缓存的技术类型，可选 generic,ehcache,jcache,redis,guava,simple,none,caffeine等\nspring.cache.cache-names= ＃应用程序启动创建缓存的名称，必须将所有注释为@Cacheable缓存name（或value）罗列在这里或者在配置类中配置，否者会报异常。\n#以下根据不同缓存技术选择配置\nspring.cache.ehcache.config= ＃EHCache的配置文件位置\nspring.caffeine.spec= ＃caffeine类型创建缓存的规范。查看CaffeineSpec了解更多关于规格格式的细节\n")])])]),n("h2",{attrs:{id:"相关注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#相关注解"}},[e._v("#")]),e._v(" 相关注解")]),e._v(" "),n("h3",{attrs:{id:"enablecaching"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#enablecaching"}},[e._v("#")]),e._v(" @EnableCaching")]),e._v(" "),n("p",[e._v("用在在启动类或者配置类上，用来开启 Spring 缓存。")]),e._v(" "),n("h3",{attrs:{id:"cacheable"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cacheable"}},[e._v("#")]),e._v(" @Cacheable")]),e._v(" "),n("p",[e._v("用在查询方法上，会自动将查询结果放入缓存，下次查询时先从缓存中取，取不到在执行查询方法。\n下面是 @Cacheable 注解主要属性和作用的说明。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\npublic @interface Cacheable {\n\n    /**\n     * 要使用的cache的名字\n     */\n    @AliasFor("cacheNames")\n    String[] value() default {};\n\n    /**\n     * 同value()，决定要使用那个/些缓存\n     */\n    @AliasFor("value")\n    String[] cacheNames() default {};\n\n    /**\n     * 使用SpEL表达式来设定缓存的key，如果不设置默认方法上所有参数都会作为key的一部分\n     */\n    String key() default "";\n\n    /**\n     * 用来生成key，与key()不可以共用\n     */\n    String keyGenerator() default "";\n\n    /**\n     * 设定要使用的cacheManager，必须先设置好cacheManager的bean，这是使用该bean的名字，如不指定，默认是加了@Primary的\n     */\n    String cacheManager() default "";\n\n    /**\n     * 使用cacheResolver来设定使用的缓存，用法同cacheManager，但是与cacheManager不可以同时使用\n     */\n    String cacheResolver() default "";\n\n    /**\n     * 使用SpEL表达式设定出发缓存的条件，在方法执行前生效\n     */\n    String condition() default "";\n\n    /**\n     * 使用SpEL设置出发缓存的条件，这里是方法执行完生效，所以条件中可以有方法执行后的value\n     */\n    String unless() default "";\n\n    /**\n     * 用于同步的，在缓存失效（过期不存在等各种原因）的时候，如果多个线程同时访问被标注的方法\n     * 则只允许一个线程通过去执行方法\n     */\n    boolean sync() default false;\n\n}\n')])])]),n("h3",{attrs:{id:"cacheput"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cacheput"}},[e._v("#")]),e._v(" @CachePut")]),e._v(" "),n("p",[e._v("用在修改或保存方法上，会自动将返回结果放入缓存。主要属性和作用与 @Cacheable 类似。")]),e._v(" "),n("p",[n("strong",[e._v("注意：修改或者保存方法一定会执行。")])]),e._v(" "),n("h3",{attrs:{id:"cacheevict"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cacheevict"}},[e._v("#")]),e._v(" @CacheEvict")]),e._v(" "),n("p",[e._v("用在删除方法上，自动删除缓存中对用的数据。主要属性和作用与 @Cacheable 类似。")]),e._v(" "),n("h3",{attrs:{id:"cacheconfig"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cacheconfig"}},[e._v("#")]),e._v(" @CacheConfig")]),e._v(" "),n("p",[e._v("配合上面三个注解使用，用在 Component 类上，在类级别设置一些缓存相关的共同配置。")]),e._v(" "),n("h2",{attrs:{id:"使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[e._v("#")]),e._v(" 使用")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("创建一个简单的 Spring Boot 项目")])]),e._v(" "),n("li",[n("p",[e._v("引入如下依赖，并在启动类添加 @EnableCaching 注解")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-test</artifactId>\n    <scope>test</scope>\n    <exclusions>\n        <exclusion>\n            <groupId>org.junit.vintage</groupId>\n            <artifactId>junit-vintage-engine</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n\n\x3c!--Spring Cache 基础依赖--\x3e\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-cache</artifactId>\n</dependency>\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[e._v("创建 Domain 类")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("package com.fxg.spring.cache.Domain;\n\npublic class User {\n\n    private Integer id; \n    private String name; \n\n    public User() {       } \n    \n    public User(Integer id, String name) { \n        this.id = id;\n        this.name = name; \n    } \n    public Integer getId() { \n        return id;\n    }\n    \n    public void setId(Integer id) { \n        this.id = id;\n    }\n    public String getName() {\n        return name; \n    }\n    \n    public void setName(String name) { \n        this.name = name; \n    } \n\n    @Override\n    public String toString() {\n    return \"User{\" + \"id=\" + id + \", name='\" + name + '\\'' + '}';\n    }\n}\n")])])]),n("ol",{attrs:{start:"4"}},[n("li",[e._v("创建 Service 类和接口")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Service\npublic class UserService {\n\n    private Logger logger = LoggerFactory.getLogger(this.getClass().getName()); \n    \n    @Cacheable(value = "userCache",key = "#id") \n    public User getUserById(Integer id) { \n        logger.info("执行查询接口，id：{}",id);\n        User user = new User(); \n        user.setId(id);\n        user.setName("小灰灰");\n        return user;\n    } \n    \n    /** \n    * 更新/保存 \n    * @param user\n    */\n    @CachePut(value = "userCache", key = "#user.id")\n    public User saveUser(User user){\n        /更新数据库\n        logger.info("执行更新接口，user:{}",user.toString());\n        return user;\n    }\n    \n    /**\n    * 删除\n    * @param id\n    */\n    @CacheEvict(value = "userCache",key = "#id")\n    public void deleteUser(Integer id){\n        //删除数据库中数据\n        logger.info("执行删除接口，id:{}",id);\n    }\n}\n\n')])])]),n("ol",{attrs:{start:"5"}},[n("li",[e._v("创建测试类")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package com.fxg.spring.cache;import com.fxg.spring.cache.Domain.User;\nimport com.fxg.spring.cache.service.UserService;\nimport org.junit.jupiter.api.Test;import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.cache.CacheManager;\n\n@SpringBootTest\npublic class UserCacheTests {\n\n    private Logger logger = LoggerFactory.getLogger(this.getClass().getName());\n\n    @Autowired\n    private UserService userService;\n\n    @Autowired\n    private CacheManager cacheManager;\n\n    @Test\n    public void testUserCache() throws Exception { \n\n        logger.info("第一次查询");   \n        User user1 = userService.getUserById(99);//第一次查询 \n        logger.info("第一次查询结果：{}", user1);\n\n        logger.info("第二次查询");\n        User user2 = userService.getUserById(99);//第二次查询 \n        logger.info("第二次查询结果：{}", user2); \n\n        logger.info("更新缓存后查询");  \n        User user4 = userService.getUserById(99);//更新缓存后再次查询  \n        logger.info("更新缓存后再次查询结果：{}", user4);   \n\n        userService.deleteUser(new User(99, ""));//删除缓存   \n\n        logger.info("删除缓存后查询");     \n        User user5 = userService.getUserById(99);//删除缓存后再次查询     \n        logger.info("删除缓存后再次查询结果：{}", user5);    \n\n        logger.info(cacheManager.getCacheNames().toString()); \n        logger.info(cacheManager.toString());  \n    }\n}\n')])])]),n("ol",{attrs:{start:"6"}},[n("li",[e._v("启动测试类，运行结果如下图")])]),e._v(" "),n("p",[n("img",{attrs:{src:"/posts/2020/2020-10-20-spring-cache-1.png",alt:""}})]),e._v(" "),n("p",[e._v("从运行结果可以看出")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("* 第一次查询走了查询接口，第二次查询时缓存生效所以没有走查询接口。\n\n* 执行更新接口后再进行查询，没有走查询接口，且查询到的数据是更新后的，说明更新接口的结果也被更新到缓存中了。\n\n* 执行删除接口后再进行查询，走了查询接口，说明删除时也同时删除了缓存中的数据。\n\n* 如果不自己配置 Cache Manager，默认情况下的 CacheManager 是 ConcurrentMapCacheManager。\n")])])]),n("h2",{attrs:{id:"整合-caffeine-cache"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#整合-caffeine-cache"}},[e._v("#")]),e._v(" 整合 Caffeine Cache")]),e._v(" "),n("p",[e._v("经过前面的实验我们基本知道了 Spring Cache 相关注解的用法，\n下面我们用 Caffeine Cache 代替默认的 ConcurrentHashMap 缓存。")]),e._v(" "),n("ol",[n("li",[e._v("引入依赖")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\x3c!--使用 Caffeine Cache--\x3e\n<dependency> \n    <groupId>com.github.ben-manes.caffeine</groupId> \n    <artifactId>caffeine</artifactId>  \n    <version>2.6.2</version>\n</dependency>\n")])])]),n("p",[e._v("引入依赖后再次运行测试类，可以看到此时的 Cache Manager 已经变成了 CaffeineCacheManager。")]),e._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[e._v("增加配置类")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Configuration\npublic class CacheConfig {   \n\n    private Logger logger = LoggerFactory.getLogger(this.getClass().getName());   \n    \n    /**     \n    * 创建CaffeineCacheManager \n    * 初始化一些key存入    \n    *     \n    * @return caffeineCacheManager   \n    */    \n    @Bean\n    //     @Primary  \n    public CaffeineCacheManager caffeineCacheManager() {    \n        CaffeineCacheManager caffeineCacheManager = new CaffeineCacheManager();        \n        caffeineCacheManager.setCacheNames(Arrays.asList("userCache"));    \n        caffeineCacheManager.setCaffeine(\n            Caffeine.newBuilder()          \n            .recordStats()                     \n            .expireAfterWrite(5, TimeUnit.SECONDS)                   \n            .maximumSize(1000)\n        );     \n        return caffeineCacheManager;   \n    }\n}\n')])])]),n("ol",{attrs:{start:"3"}},[n("li",[e._v("测试类中增加缓存过期相关代码")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Test\npublic void testUserCache() throws Exception {  \n\n    logger.info("第一次查询");  \n    User user1 = userService.getUserById(99);//第一次查询  \n    logger.info("第一次查询结果：{}", user1);  \n    \n    logger.info("第二次查询");   \n    User user2 = userService.getUserById(99);//第二次查询    \n    logger.info("第二次查询结果：{}", user2);   \n    \n    Thread.sleep(6000);//等待6秒，等缓存过期   \n    \n    logger.info("缓存过期后再次查询");    \n    User user3 = userService.getUserById(99);//缓存过期后再次查询  \n    logger.info("缓存过期后再次查询结果：{}", user3);  \n    \n    userService.saveUser(new User(99, "红太狼"));//更新缓存   \n    \n    logger.info("更新缓存后查询");    \n    User user4 = userService.getUserById(99);//更新缓存后再次查询   \n    logger.info("更新缓存后再次查询结果：{}", user4);   \n    \n    userService.deleteUser(99);//删除缓存    \n    \n    logger.info("删除缓存后查询");   \n    User user5 = userService.getUserById(99);//删除缓存后再次查询    \n    logger.info("删除缓存后再次查询结果：{}", user5);    \n\n    logger.info(cacheManager.getCacheNames().toString());    \n    logger.info(cacheManager.toString());\n}\n')])])]),n("ol",{attrs:{start:"4"}},[n("li",[e._v("运行结果如下图")])]),e._v(" "),n("p",[n("img",{attrs:{src:"/posts/2020/2020-10-20-spring-cache-2.png",alt:""}})]),e._v(" "),n("p",[e._v("从运行结果可以看出")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[e._v("* 第一次查询走了查询接口，第二次查询时缓存生效所以没有走查询接口。\n\n* 执行更新接口后再进行查询，没有走查询接口，且查询到的数据是更新后的，说明更新接口的结果也被更新到缓存中了。\n\n* 等缓存过期后再进行查询，走了查询接口，说明 Caffeine 的定时驱逐策略生效。\n\n* 执行删除接口后再进行查询，走了查询接口，说明删除时也同时删除了缓存中的数据。\n\n* ache Manager 已经由默认情况下的 ConcurrentMapCacheManager 变成了 CaffeineCacheManager。\n")])])]),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),n("p",[e._v("在项目中引入 Spring Cache 可以帮助我们很方便的实现缓存开发，再加上 Caffeine 的加持，\n轻松实现高性能单机缓存。测试代码已上传 "),n("a",{attrs:{href:"https://github.com/yakunyue/my-demo",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),n("OutboundLink")],1),e._v("。")]),e._v(" "),n("p",[e._v("另外再补充一点 SPEL 的知识，方便定义缓存的 key 和 condition 时查看。")]),e._v(" "),n("p",[e._v("Spring Cache提供了一些供我们使用的SpEL上下文数据")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("名称")]),e._v(" "),n("th",[e._v("位置")]),e._v(" "),n("th",[e._v("描述")]),e._v(" "),n("th",[e._v("示例")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("methodName")]),e._v(" "),n("td",[e._v("root对象")]),e._v(" "),n("td",[e._v("当前被调用的方法名")]),e._v(" "),n("td",[e._v("#root.methodname")])]),e._v(" "),n("tr",[n("td",[e._v("method")]),e._v(" "),n("td",[e._v("root对象")]),e._v(" "),n("td",[e._v("当前被调用的方法")]),e._v(" "),n("td",[e._v("#root.method.name")])]),e._v(" "),n("tr",[n("td",[e._v("target")]),e._v(" "),n("td",[e._v("root对象")]),e._v(" "),n("td",[e._v("当前被调用的目标对象实例")]),e._v(" "),n("td",[e._v("#root.target")])]),e._v(" "),n("tr",[n("td",[e._v("targetClass")]),e._v(" "),n("td",[e._v("root对象")]),e._v(" "),n("td",[e._v("当前被调用的目标对象的类")]),e._v(" "),n("td",[e._v("#root.targetClass")])]),e._v(" "),n("tr",[n("td",[e._v("args")]),e._v(" "),n("td",[e._v("root对象")]),e._v(" "),n("td",[e._v("当前被调用的方法名")]),e._v(" "),n("td",[e._v("#root.args[0]")])]),e._v(" "),n("tr",[n("td",[e._v("caches")]),e._v(" "),n("td",[e._v("root对象")]),e._v(" "),n("td",[e._v("当前被调用的方法名")]),e._v(" "),n("td",[e._v("#root.caches[0].name")])]),e._v(" "),n("tr",[n("td",[e._v("Argument Name")]),e._v(" "),n("td",[e._v("执行上下文")]),e._v(" "),n("td",[e._v("当前被调用的方法的参数，如findArtisan(Artisan artisan),可以通过#artsian.id获得参数")]),e._v(" "),n("td",[e._v("#artsian.id")])]),e._v(" "),n("tr",[n("td",[e._v("result")]),e._v(" "),n("td",[e._v("执行上下文")]),e._v(" "),n("td",[e._v("方法执行后的返回值（仅当方法执行后的判断有效，如 unless cacheEvict的beforeInvocation=false）")]),e._v(" "),n("td",[e._v("#result")])])])]),e._v(" "),n("p",[e._v("注意：")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("当我们要使用root对象的属性作为key时我们也可以将“#root”省略，因为Spring默认使用的就是root对象的属性。 如")]),e._v(" "),n("p",[e._v('@Cacheable(key = "targetClass + methodName +#p0")')])]),e._v(" "),n("li",[n("p",[e._v("使用方法参数时我们可以直接使用“#参数名”或者“#p参数index”。 如：")]),e._v(" "),n("p",[e._v('@Cacheable(value="userCache", key="#id")\n@Cacheable(value="userCache", key="#p0")')])])]),e._v(" "),n("p",[e._v("SpEL的运算符")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("类型")]),e._v(" "),n("th",[e._v("运算符")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("关系")]),e._v(" "),n("td",[e._v("<，>，<=，>=，==，!=，lt，gt，le，ge，eq，ne")])]),e._v(" "),n("tr",[n("td",[e._v("算数")]),e._v(" "),n("td",[e._v("+，- ，* ，/，%，^")])]),e._v(" "),n("tr",[n("td",[e._v("逻辑")]),e._v(" "),n("td",[e._v("&&，")])]),e._v(" "),n("tr",[n("td",[e._v("条件")]),e._v(" "),n("td",[e._v("?: (ternary)，?: (elvis)")])]),e._v(" "),n("tr",[n("td",[e._v("正则")]),e._v(" "),n("td",[e._v("matches")])]),e._v(" "),n("tr",[n("td",[e._v("其他")]),e._v(" "),n("td",[e._v("?.，?[…]，![…]，^[…]，$[…]")])])])])])}),[],!1,null,null,null);a.default=t.exports}}]);