(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{504:function(a,v,_){"use strict";_.r(v);var t=_(4),s=Object(t.a)({},(function(){var a=this,v=a.$createElement,_=a._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("p",[a._v("学习 Java 并发编程必须先理解 Java 内存模型。")]),a._v(" "),_("h3",{attrs:{id:"什么是-java-内存模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是-java-内存模型"}},[a._v("#")]),a._v(" 什么是 Java 内存模型")]),a._v(" "),_("p",[a._v("Java 内存模型就是一种 Java 虚拟机规范。")]),a._v(" "),_("p",[a._v("虚拟机通过这套规范来屏蔽各种硬件和操作系统的内存访问差异，以实现让 Java 程序在各种平台下都能达到一致的内存访问效果。")]),a._v(" "),_("p",[a._v("Java 内存模型的主要目的是定义程序中各种变量的访问规则，即关注在虚拟机中把变量值存储到内存和从内存中取出变量值这样的底层细节。")]),a._v(" "),_("p",[a._v("简单来说就是：它是 Java 线程访问内存中变量的一套访问规则。")]),a._v(" "),_("h3",{attrs:{id:"java-内存模型规定了什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#java-内存模型规定了什么"}},[a._v("#")]),a._v(" Java 内存模型规定了什么")]),a._v(" "),_("p",[a._v("Java内存模型规定：")]),a._v(" "),_("ul",[_("li",[a._v("所有的变量都存储在主内存（Main M emory）中；")]),a._v(" "),_("li",[a._v("每条线程还有自己的工作内存（Working M emory）；")]),a._v(" "),_("li",[a._v("线程的工作内存中保存了被该线程使用的变量的主内存副本；")]),a._v(" "),_("li",[a._v("线程对变量的所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的数据；")]),a._v(" "),_("li",[a._v("不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成；")])]),a._v(" "),_("p",[a._v("线程、主内存、工作内存三者的交互关系如下图：")]),a._v(" "),_("p",[_("img",{attrs:{src:"/posts/2020-07-03-juc-java-memory-mode/01.png",alt:""}})]),a._v(" "),_("h3",{attrs:{id:"内存间交互操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内存间交互操作"}},[a._v("#")]),a._v(" 内存间交互操作")]),a._v(" "),_("p",[a._v("主内存与工作内存之间具体的交互协议，即一个变量如何从主内存拷贝到工作内存、如何从。工作内存同步回主内存这一类的实现细节，Java 内存模型中定义了以下8种操作来完成：")]),a._v(" "),_("ul",[_("li",[_("p",[a._v("lock（锁定）：作用于主内存的变量，它把一个变量标识为一条线程独占的状态。")])]),a._v(" "),_("li",[_("p",[a._v("unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。")])]),a._v(" "),_("li",[_("p",[a._v("read（读取）：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。")])]),a._v(" "),_("li",[_("p",[a._v("load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。")])]),a._v(" "),_("li",[_("p",[a._v("use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。")])]),a._v(" "),_("li",[_("p",[a._v("assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。")])]),a._v(" "),_("li",[_("p",[a._v("store（存储）：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用。")])]),a._v(" "),_("li",[_("p",[a._v("write（写入）：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。")])])]),a._v(" "),_("p",[a._v("Java 虚拟机实现时必须保证上面提及的每一种操作都是原子的、不可再分的。")]),a._v(" "),_("h3",{attrs:{id:"内存操作规则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#内存操作规则"}},[a._v("#")]),a._v(" 内存操作规则")]),a._v(" "),_("p",[a._v("Java内存模型还规定了在执行上述8种基本操作时必须满足如下规则：")]),a._v(" "),_("ul",[_("li",[_("p",[a._v("read必须在load之前，store必须在write之前，但他们之间不一定是连续的。")])]),a._v(" "),_("li",[_("p",[a._v("不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者工作内存发起回写了但主内存不接受的情况出现。")])]),a._v(" "),_("li",[_("p",[a._v("不允许一个线程丢弃它最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回主内存。")])]),a._v(" "),_("li",[_("p",[a._v("不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存中。")])]),a._v(" "),_("li",[_("p",[a._v("一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量，换句话说就是对一个变量实施use、store操作之前，必须先执行assign和load操作。")])]),a._v(" "),_("li",[_("p",[a._v("一个变量在同一个时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。")])]),a._v(" "),_("li",[_("p",[a._v("如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作以初始化变量的值。")])]),a._v(" "),_("li",[_("p",[a._v("如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其他线程锁定的变量。")])]),a._v(" "),_("li",[_("p",[a._v("对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）。")])])]),a._v(" "),_("h3",{attrs:{id:"简化描述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简化描述"}},[a._v("#")]),a._v(" 简化描述")]),a._v(" "),_("p",[a._v("最新的JSR-133文档中，已经放弃了采用这8种操作去定义Java内存模型的访问协议，缩减为4种：为read、write、lock和unlock，但也只是描述方式改变了，Java内存模型并没有改变。")]),a._v(" "),_("h3",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),_("p",[a._v("Java 内存模型就是 Java 线程访问内存中变量的一套访问规则。它定义了工作内存和主内存，以及工作内存和主内存之间的一系列操作，还有这些操作必须遵守的一系列规则。")])])}),[],!1,null,null,null);v.default=s.exports}}]);