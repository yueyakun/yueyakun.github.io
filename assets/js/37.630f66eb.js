(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{520:function(a,t,e){"use strict";e.r(t);var r=e(4),s=Object(r.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("p",[a._v("我在写一些练手项目的时候有很多代码是通用的，之前都是采用复制粘贴的手段从一个项目粘到另一个项目。\n一直想建一个通用点的 maven 脚手架项目来代替这一操作，正好这两天有空，就付诸行动了。")]),a._v(" "),e("h2",{attrs:{id:"项目结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目结构"}},[a._v("#")]),a._v(" 项目结构")]),a._v(" "),e("p",[a._v("├─api\n│      HttpResult.java     #统一的放回对象封装类\n│      HttpStatus.java     #返回码常量类\n│     \n├─configs\n│      ApiLogAspect.java                   #接口请求日志打印切面类\n│      AutoEnumTypeHandler.java       #自定义的枚举转换器类\n│      CacheManagerConfig.java         #单机缓存配置类\n│      ExceptionHandlerAdvice.java      #统一异常捕捉配置\n│      MyBatisPlusConfiguration.java    #MyBatisPlus 配置类\n│      MyEnumTypeHandler.java          #自定义枚举转换器类转换方法具体实现类\n│      MyTaskExecutorCustomizer.java  #Spring Boot 异步任务默认线程池配置类\n│      WebConfig.java                       #Web配置类\n│     \n├─controller                    #Controller 层\n│      UserController.java\n│     \n├─domain                 #domain 包\n│      User.java\n│     \n├─enums                   #枚举包\n│      BaseEnum.java\n│      Gender.java\n│     \n├─exception                #异常信息封装相关类\n│      ExceptionDescriptor.java\n│      ExceptionSummary.java\n│      StackSummary.java\n│     \n├─formatter                 #自定义 Formatter 包\n│      DateFormatParser.java\n│      DateFormatter.java\n│      LocalDateFormatter.java\n│      LocalDateTimeFormatter.java\n│      LocalTimeFormatter.java\n│     \n├─mapper                  #mapper 层\n│      UserMapper.java\n│"),e("br"),a._v("\n└─service                 #service 层\nUserService.java")]),a._v(" "),e("p",[a._v("注：使用以下命令可以导出项目目录结构：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("tree  >> D:/tree.txt 只有文件夹\ntree /f >> D:/tree.txt 包括文件夹和文件\n")])])]),e("h2",{attrs:{id:"集成功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集成功能"}},[a._v("#")]),a._v(" 集成功能")]),a._v(" "),e("h3",{attrs:{id:"通用接口返回对象封装类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通用接口返回对象封装类型"}},[a._v("#")]),a._v(" 通用接口返回对象封装类型")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("统一返回结果格式，方便前端取用。\n")])])]),e("h3",{attrs:{id:"基于-aop-的接口请求日志打印功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于-aop-的接口请求日志打印功能"}},[a._v("#")]),a._v(" 基于 AOP 的接口请求日志打印功能")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("基于 AOP 实现，打印 Controller 接口的入参、执行结果、执行时间、异常原因、等信息。\n")])])]),e("h3",{attrs:{id:"自定义-mybatis-枚举转换处理器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义-mybatis-枚举转换处理器"}},[a._v("#")]),a._v(" 自定义 MyBatis 枚举转换处理器")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v('mybatis 默认的枚举转换器是 org.apache.ibatis.type.EnumTypeHandler。\nEnumTypeHandler 能把枚举的名字映射成数据库的 CHAR 类型，如果需要其他的映射逻辑（比如将枚举的 value 映射成数据库的 int）就需要自己定义转换器。\n\n自定义转换器配置方式有三种：\n1. 在 application.yml 配置文件中配置：myybatis.configuration.default-enum-type-handler\n2. 在 mapper.xml 中的<result></result>中配置:\n    <result column="gender" jdbcType="int" typeHandler="com.fxg.archetype.configs.MyEnumTypeHandler"></result>\n3. 在 mybatis 配置文件的 <typeHandlers></typeHandlers> 中配置\n')])])]),e("h3",{attrs:{id:"通用单机缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通用单机缓存"}},[a._v("#")]),a._v(" 通用单机缓存")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("这个之前写个一篇博客，不熟悉的可以看下：[Spring 基于注释的缓存框架](https://blog.fengxiuge.top/2020/2020-10-20-spring-cache.html)\n")])])]),e("h3",{attrs:{id:"统一异常捕捉"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#统一异常捕捉"}},[a._v("#")]),a._v(" 统一异常捕捉")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("借助 @RestControllerAdvice 注解实现的统一异常捕捉，封装异常信息，打印异常日志等。\n")])])]),e("h3",{attrs:{id:"mybatis-plus-自动分页"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-plus-自动分页"}},[a._v("#")]),a._v(" MyBatis-Plus 自动分页")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("[MyBatis-Plus 分页查询文档](https://baomidou.com/guide/page.html)，\n")])])]),e("h3",{attrs:{id:"threadpooltaskexecutor-线程池"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#threadpooltaskexecutor-线程池"}},[a._v("#")]),a._v(" ThreadPoolTaskExecutor 线程池")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("启动类增加 @EnableAsync 注解后，spring 会自动创建此线程池，用来执行 @Async 方法。\n线程池参数可以在 spring.task.execution 下配置，\n也可以通过实现 org.springframework.boot.task.TaskExecutorCustomizer 接口的 void customize(ThreadPoolTaskExecutor taskExecutor) 方法来配置。\n")])])]),e("h3",{attrs:{id:"自定义的时间类-formatter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义的时间类-formatter"}},[a._v("#")]),a._v(" 自定义的时间类 Formatter")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("spring默认只能将格式为“yyyy/mm/dd”这样个是的日期字符串转化为 Java 的日期类，\n要实现其他样式的转化就要提供自定义的 Formatter\n")])])]),e("h2",{attrs:{id:"todo-list"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#todo-list"}},[a._v("#")]),a._v(" TODO LIST")]),a._v(" "),e("p",[a._v("后续想到什么功能再往里加")]),a._v(" "),e("h2",{attrs:{id:"安装-archetype-步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装-archetype-步骤"}},[a._v("#")]),a._v(" 安装 Archetype 步骤")]),a._v(" "),e("ol",[e("li",[e("p",[a._v("在项目目录执行命令：mvn archetype:create-from-project")])]),a._v(" "),e("li",[e("p",[a._v("跳转到刚生成的 target\\generated-sources\\archetype 目录下执行命令 mvn install，将项目安装到本地 maven 仓库。")]),a._v(" "),e("p",[a._v("注意：这一步 maven 会自动为项目名称追加 -archetype 后缀，后面用的时候别忘了。")])]),a._v(" "),e("li",[e("p",[a._v("点击 IDEA 菜单 File->New->Project，打开创建 Maven 项目的页面，然后按下图操作。")])])]),a._v(" "),e("p",[e("img",{attrs:{src:"/posts/2020/2020-12-23-spring-boot-web-archetype/01.png",alt:""}})]),a._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[a._v("然后各种next，完成后会创建一个跟我们的脚手架项目结构一样的新项目，\n并且我们的脚手架项目也在 Maven 脚手架列表中了。下次创建新项目就可以直接勾选了。")])]),a._v(" "),e("p",[e("img",{attrs:{src:"/posts/2020/2020-12-23-spring-boot-web-archetype/02.png",alt:""}})]),a._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),e("p",[a._v("项目已上传 GitHub ,"),e("a",{attrs:{href:"https://github.com/yueyakun2017/my-demo",target:"_blank",rel:"noopener noreferrer"}},[a._v("GitHub项目地址"),e("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=s.exports}}]);