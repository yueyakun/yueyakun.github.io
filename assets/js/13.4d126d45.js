(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{499:function(a,t,s){"use strict";s.r(t);var n=s(4),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("从 JSR 303 开始，Bean Validation 已经成为 JAVA 的标准规范之一。")]),a._v(" "),s("p",[a._v("到目前为止，Bean Validation 已经经过三个版本的迭代--JSR 303(1.0)、JSR 349(1.1)、JSR 380(2.0)。\nHibernate Validator 又对JSR 303 进行了扩展，合理运用这两个框架提供的校验功能可以为项目省去很多重复的校验代码。\nSpring 已经为数据校验提供了很好的支持，基于 Spring 和 Bean Validation 规范中的一些注解，再加上一些自定义内容，能极大简化项目中参数校验代码。")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://beanvalidation.org",target:"_blank",rel:"noopener noreferrer"}},[a._v("Bean Validation 官网地址"),s("OutboundLink")],1)]),a._v(" "),s("p",[s("a",{attrs:{href:"https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Hivernate Validator 文档地址"),s("OutboundLink")],1)]),a._v(" "),s("p",[a._v("本文只讨论 Bean Validation 的常用姿势，足够解决项目中90%的校验需求，如需彻底了解 Bean Validation，还需认真阅读上面的两个文档。\n"),s("em",[a._v("本文所有的测试代码已上传gitHub，项目地址："),s("a",{attrs:{href:"https://github.com/yueyakun2017/demo-validation",target:"_blank",rel:"noopener noreferrer"}},[a._v("demo-validation"),s("OutboundLink")],1)])]),a._v(" "),s("h1",{attrs:{id:"bean-validation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-validation"}},[a._v("#")]),a._v(" Bean Validation")]),a._v(" "),s("p",[a._v("实现校验最主要的两个组件是约束注解（Constraint annotation）和约束校验器（Constraint validator）。校验注解加在需要校验的参数或者其内部属性上，校验器负责判断该参数或其内部属性是否符合检验规则。")]),a._v(" "),s("h2",{attrs:{id:"约束注解（constraint-annotation）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#约束注解（constraint-annotation）"}},[a._v("#")]),a._v(" 约束注解（Constraint annotation）")]),a._v(" "),s("blockquote",[s("p",[a._v("如果注解的保持策略包含 RUNTIME，并且注释本身是用 javax.validation.Constraint 注释的，则该注释被认为是约束注解。-- JSR 303 文档")])]),a._v(" "),s("h3",{attrs:{id:"官方内置的约束注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#官方内置的约束注解"}},[a._v("#")]),a._v(" 官方内置的约束注解")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://beanvalidation.org/2.0/spec/#builtinconstraints",target:"_blank",rel:"noopener noreferrer"}},[a._v("官方内置注解文档地址"),s("OutboundLink")],1),a._v("\n内置的约束注解都在 javax.validation.constraints 包，Hibernater 的约束注解在 org.hibernate.validator.constraints 包。官方包里的约束注解比较多，不一一列举了，这些约束注解基本上能满足项目中 80% 以上的校验需求。Spring 默认引入了这两个包，所以我们在使用的时候基本不用再手动引入。")]),a._v(" "),s("h3",{attrs:{id:"约束注解的默认字段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#约束注解的默认字段"}},[a._v("#")]),a._v(" 约束注解的默认字段")]),a._v(" "),s("p",[a._v("约束注解有三个保留名称字段，这三个字段有特殊意义，每个约束注解都必须有")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("message")]),a._v(" "),s("ul",[s("li",[a._v("每一个约束注解都必须有一个 String 类型的 message 字段")]),a._v(" "),s("li",[a._v("这个属性的值是用来构建校验失败时的报错信息的")]),a._v(" "),s("li",[a._v("值可以直接是错误信息本身，也可以是一个占位符，真正的错误信息放在 ValidationMessages.properties 文件中")])])]),a._v(" "),s("li",[s("p",[a._v("group")]),a._v(" "),s("ul",[s("li",[a._v("每一个约束注解都必须有一个 Class 数组类型的 group 字段")]),a._v(" "),s("li",[a._v("group 字段的默认值必须是空数组")]),a._v(" "),s("li",[a._v("作用是控制校验顺序或者执行部分校验")])])]),a._v(" "),s("li",[s("p",[a._v("payload")]),a._v(" "),s("ul",[s("li",[a._v("每一个约束注解都必须有一个 Payload 数组类型的 payload 字段")]),a._v(" "),s("li",[a._v("payload 字段的默认值必须是空数组")]),a._v(" "),s("li",[a._v("通常用它控制校验失败时的日志等级")])])]),a._v(" "),s("li",[s("p",[a._v("其他自定义属性")]),a._v(" "),s("ul",[s("li",[a._v("根据约束的不同，约束注解还会定义其他类型的字段，如 @Size 注解中的 min 和 max 字段")])])])]),a._v(" "),s("h3",{attrs:{id:"校验组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#校验组"}},[a._v("#")]),a._v(" 校验组")]),a._v(" "),s("p",[a._v("group 属性相同的字段属于同一校验组。group 属性可以是数组类型，所以一个字段有可能属于多个校验组。校验组有以下两个功能：")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("实现部分校验\n约束注解是可以通过指定 group 来实现分组校验的，比如在项目中，一条数据“添加”和“修改”的校验规则肯定是不一样的，这时我们可以指定对象中字段约束注解的校验组来实现部分校验")])]),a._v(" "),s("li",[s("p",[a._v("控制检验顺序\n控制校验顺序需要配合 @GroupSequence 注解使用，定义如下一个校验组接口，就可以实现 先校验 New.class 组的约束条件后校验 Custom.class 组的约束条件。（"),s("strong",[a._v("注意：如果前面组的校验不通过，后面组的约束校验是不会进行的")]),a._v("）")])])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("import")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token namespace"}},[a._v("javax"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("validation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("GroupSequence")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@GroupSequence")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("New")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("NewAndUpdate")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[s("em",[a._v("用group实现部分校验的测试在 "),s("a",{attrs:{href:"https://github.com/yueyakun2017/demo-validation",target:"_blank",rel:"noopener noreferrer"}},[a._v("demo-validation"),s("OutboundLink")],1),a._v(" 项目的 TestCustomer 类中")])]),a._v(" "),s("h3",{attrs:{id:"校验的继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#校验的继承"}},[a._v("#")]),a._v(" 校验的继承")]),a._v(" "),s("p",[a._v("父类中的校验注解在子类中是一样生效的")]),a._v(" "),s("h3",{attrs:{id:"级联校验"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#级联校验"}},[a._v("#")]),a._v(" 级联校验")]),a._v(" "),s("p",[a._v("Bean Validation 支持级联校验（文档没说最多关联几级）\n有 A 和 B 两个 JavaBean，如果 A 中有一个 B 类型的字段 b，校验 A 的时候想延伸校验段 b，只需在 b 字段上加 @Valid 注解。")]),a._v(" "),s("p",[a._v("级联校验也适用于集合类型的字段，如：")]),a._v(" "),s("ul",[s("li",[a._v("集合")]),a._v(" "),s("li",[a._v("实现了java.lang.Iterable接口( 例如Collection, List 和 Set)")]),a._v(" "),s("li",[a._v("实现了java.util.Map接口")])]),a._v(" "),s("p",[s("em",[a._v("关于级联校验的简单测试在 "),s("a",{attrs:{href:"https://github.com/yueyakun2017/demo-validation",target:"_blank",rel:"noopener noreferrer"}},[a._v("demo-validation"),s("OutboundLink")],1),a._v(" 项目的 TestCustomer 类中")])]),a._v(" "),s("h3",{attrs:{id:"约束条件组合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#约束条件组合"}},[a._v("#")]),a._v(" 约束条件组合")]),a._v(" "),s("p",[a._v("约束注解是可以组合使用的。比如可以在自定义注解上添加一个或多个定义好约束注解，这样这个自定义注解就同时有了多个约束条件，比如下面的这个自定义的 @KeyId 注解。它上面标注了 @Min 和 @NotNull 注解，这样 @KeyId 就同时拥有了\n@Min 和 @NotNull 的约束条件，当然你还可以用 @Constraint 注解再指定一个校验器。其中 @ReportAsSingleViolation 注解的作用是不管当违反哪个约束，都报本注解的 message 信息，不加这个注解的话会报各自注解的 message 信息。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//校验是否符合主键id要求，不为null，大于等1")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Min")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@NotNull")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@ReportAsSingleViolation")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Constraint")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("validatedBy "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Retention")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("RetentionPolicy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("RUNTIME"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Target")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ElementType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("FIELD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ElementType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("METHOD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ElementType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("PARAMETER"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ElementType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("ANNOTATION_TYPE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@interface")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("KeyId")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("message")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"{custom.constraints.KeyId.message}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("groups")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Class")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Payload")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("payload")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("default")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[s("em",[a._v("关于约束条件组合的简单测试在 "),s("a",{attrs:{href:"https://github.com/yueyakun2017/demo-validation",target:"_blank",rel:"noopener noreferrer"}},[a._v("demo-validation"),s("OutboundLink")],1),a._v(" 项目的 TestCustomer 类中")])]),a._v(" "),s("h3",{attrs:{id:"可重复约束注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可重复约束注解"}},[a._v("#")]),a._v(" 可重复约束注解")]),a._v(" "),s("p",[a._v("Bean Validation 2.0 的一个新特性就是所有的内置注解都修改为了可重复注解，可重复注解的使用比较简单，举例如下。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Customer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Integer")]),a._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\t\n\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("List")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    \t\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("min"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("max"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("message "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"普通用户昵称长度最少为8，最多为20"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    \t\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("min"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("max"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("30")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("groups "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("VIP"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("message "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"VIP用户昵称长度最少为4，最多为30"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" nickname"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h3",{attrs:{id:"自定义约束注解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义约束注解"}},[a._v("#")]),a._v(" 自定义约束注解")]),a._v(" "),s("p",[a._v("示例项目 demo-validation 中的 @CheckCase 就是一个简单的自定义注解。它的作用是校验目标字符串都为\n大写或者小写（通过 mode 属性指定）。\n@CheckCase 的校验器是 CheckCaseValidator 类。校验的判断逻辑都在这个类里。")]),a._v(" "),s("h3",{attrs:{id:"错误消息提示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#错误消息提示"}},[a._v("#")]),a._v(" 错误消息提示")]),a._v(" "),s("p",[a._v("错误消息提示信息可以在使用约束注解是通过 message 属性指定，也可以使用表达式配合在 resources 目录下的 ValidationMessages.properties 文件来指定。")]),a._v(" "),s("p",[a._v("通过配置文件指定的时候支持通配符匹配，框架会自动匹配约束注解中属性名字相同的通配符。如果是其他特殊名称的通配符，也可以在验证器的 isValid 方法中通过向 ConstraintValidatorContext 上下文中增加参数，从而实信息填充。如 @CheckCase 的检验提示信息就采用了通配符的方式。")]),a._v(" "),s("h2",{attrs:{id:"约束校验器（constraint-validator）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#约束校验器（constraint-validator）"}},[a._v("#")]),a._v(" 约束校验器（Constraint validator）")]),a._v(" "),s("p",[a._v("还是以前面自定义的@CheckCase 和 CheckCaseValidator 类为例。这里说一下约束校验器，约束校验器主要提供判断被校验对象是否满足约束条件的代码逻辑。校验器必须实现 ConstraintValidator 接口。\n它有两个泛型参数：")]),a._v(" "),s("ul",[s("li",[a._v("第一个是这个校验器所服务的约束注解类型（在我们的例子中即CheckCase）")]),a._v(" "),s("li",[a._v("第二个这个校验器所支持到被校验元素到类型（即String）。")])]),a._v(" "),s("p",[a._v("CheckCaseValidator 类有两个方法：")]),a._v(" "),s("ul",[s("li",[a._v("方法 initialize 默认是一个空方法，入参是约束注解实例，子类通过重新这个方法可以完成一项校验的初始化工作。例子中在这一步做了初始化 caseMode 字段的工作。")]),a._v(" "),s("li",[a._v("方法 isValid 返回一个 boolean 值，校验通过返回 true 校验失败返回 false。入参是目标字段的 value 和 ConstraintValidatorContext ，value 用于检验逻辑，通过 ConstraintValidatorContext 参数可以实现对报错信息的动态修改。")])]),a._v(" "),s("h1",{attrs:{id:"spring-对-bean-validation-的支持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-对-bean-validation-的支持"}},[a._v("#")]),a._v(" Spring 对 Bean Validation 的支持")]),a._v(" "),s("p",[a._v("如果每当校验约束的时候都要创建一个 Validator，然后调用 Validator 的 validate 方法，之后再出来返回的校验结果也挺烦的。还好 Spring 为 Bean Validation 提供了很好的支持。")]),a._v(" "),s("p",[a._v("Spring 的参数校验功能有两部分组成：")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("首先是 argument resolver 内部进行的 data-binding 时的 参数校验（validation），这个阶段的 validation 是由spring-mvc实现并决定的。")])]),a._v(" "),s("li",[s("p",[a._v("第二部分validation是由spring-framework，基于aop实现的。")])])]),a._v(" "),s("p",[a._v("下面对这两部分校验功能进行详细说明")]),a._v(" "),s("h2",{attrs:{id:"data-binding-时的参数校验"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#data-binding-时的参数校验"}},[a._v("#")]),a._v(" data-binding 时的参数校验")]),a._v(" "),s("p",[a._v("这一层的参数校验可以看做是由 Spring MVC 在 argument resolver 阶段进行 data-binding 时顺便进行的，这个阶段的参数校验有以下几个特点：")]),a._v(" "),s("ul",[s("li",[a._v("只在 Controller 层生效")]),a._v(" "),s("li",[a._v("必须在 Controller 上添加 @Validated 注解")]),a._v(" "),s("li",[a._v("RequestParam 参数校验异常会直接返回 500 错误")]),a._v(" "),s("li",[a._v("RequestBody 对象参数必须在对象参数前加@Valid 或 @Validated 注解才会触发内部属性的校验规则")]),a._v(" "),s("li",[a._v("RequestBody 参数校验异常结果可以用 BindingResult 对象接收，然后自主处理，也可以不接收。不接收会直接 400 Bad Request")])]),a._v(" "),s("p",[s("em",[a._v("这部分的测试代码主要在"),s("a",{attrs:{href:"https://github.com/yueyakun2017/demo-validation",target:"_blank",rel:"noopener noreferrer"}},[a._v("demo-validation"),s("OutboundLink")],1),a._v("项目的 AddressController 类中")])]),a._v(" "),s("h2",{attrs:{id:"spring-基于-aop-实现的参数校验"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-基于-aop-实现的参数校验"}},[a._v("#")]),a._v(" Spring 基于 AOP 实现的参数校验")]),a._v(" "),s("p",[a._v("这部分的参数校验由 spring-framework 基于 AOP 实现，特点如下：")]),a._v(" "),s("ul",[s("li",[a._v("只要一个类被注册为bean并且加了@Validated注解，则spring为此类的所有方法提供参数校验")]),a._v(" "),s("li",[a._v("对象参数必须在对象参数前加@Valid 注解才会触发内部属性的校验规则")]),a._v(" "),s("li",[a._v("校验不通过会报异常，异常类型为 javax.validation.ConstraintViolationException")]),a._v(" "),s("li",[a._v("由于基于AOP实现，所以类内部调用是不会触发validation的")])]),a._v(" "),s("p",[s("em",[a._v("这部分的测试代码主要在"),s("a",{attrs:{href:"https://github.com/yueyakun2017/demo-validation",target:"_blank",rel:"noopener noreferrer"}},[a._v("demo-validation"),s("OutboundLink")],1),a._v("项目的 TestAOPValidationController 和 AddressService 类中")])]),a._v(" "),s("h1",{attrs:{id:"bean-validation-2-0-的新特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bean-validation-2-0-的新特性"}},[a._v("#")]),a._v(" Bean Validation 2.0 的新特性")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("对 Java 的最低版本要求是 Java 8")])]),a._v(" "),s("li",[s("p",[a._v("支持容器的校验，通过TYPE_USE类型的注解实现对容器内容的约束：List<@Email String>")])]),a._v(" "),s("li",[s("p",[a._v("支持日期时间类型校验，@Past 和 @Future")])]),a._v(" "),s("li",[s("p",[a._v("新增内置约束注解，@Email, @NotEmpty, @NotBlank, @Positive, @PositiveOrZero, @Negative, @NegativeOrZero, @PastOrPresent and @FutureOrPresent")])]),a._v(" "),s("li",[s("p",[a._v("所有内置注解都是可重复注解")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);